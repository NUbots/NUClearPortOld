/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUBots <nubots@nubots.net>
 */

package messages.support.nubugger.proto;

import "messages/input/proto/Sensors.proto";
import "messages/localisation/proto/Localisation.proto";

message Message {
    enum Type {
        SENSOR_DATA = 1;
        VISION = 2;
        LOCALISATION = 3;
		DATA_POINT = 4;
		REACTION_STATISTICS = 5;
		LOOKUP_TABLE = 6;
		COMMAND = 7;
    }

    required Type type = 1;
    required uint64 utc_timestamp = 2;

    optional messages.input.proto.Sensors sensor_data = 3;
    optional Vision vision = 4;
    optional messages.localisation.proto.Localisation localisation = 5;
    optional DataPoint dataPoint = 6;
    optional ReactionStatistics reactionStatistics = 7;
	optional LookupTable lookupTable = 8;
	optional Command command = 9;

    message Command {
        optional string command = 1;
    }

	message LookupTable {
		optional bytes table = 1;
        optional bool save = 2;
	}

	message ReactionStatistics {
		optional string name = 1;
		optional string triggerName = 2;
		optional string functionName = 3;
		optional uint64 reactionId = 4;
		optional uint64 taskId = 5;
		optional uint64 causeReactionId = 6;
		optional uint64 causeTaskId = 7;
		optional uint64 emitted = 8;
		optional uint64 started = 9;
		optional uint64 finished = 10;
	}


	message DataPoint {
		optional string label = 1;
		repeated float value = 2;
	}

	message Image {
		optional uint32 width = 1;
		optional uint32 height = 2;
		optional bytes data = 3;
	}

	message VisionFieldObject {
		enum ShapeType {
			CIRCLE = 1;
			QUAD = 2;
			POLYGON = 3;
			UNKNOWN_SHAPE = 4;
		}

		enum GoalType {
			LEFT = 1;
			RIGHT = 2;
			UNKNOWN_GOAL = 3;
		}

		enum ObstacleColour {
			UNKNOWN = 1;
			CYAN = 2;
			MAGENTA = 3;
		}

		optional ShapeType shape_type = 1;
		optional GoalType goal_type = 2;
		optional string name = 3;

		optional float screen_x = 4;
		optional float screen_y = 5;

		optional float rotation = 6;

		optional uint32 radius = 7;
		optional uint32 width = 8;
		optional uint32 height = 9;
		repeated uint32 points = 10;

		repeated float measured_relative_position = 11; //Spherical

		optional ObstacleColour obstacle_colour = 12;
	}

	message VisionClassifiedSegment {
		optional uint32 start_x = 1;
		optional uint32 start_y = 2;

		optional uint32 end_x = 3;
		optional uint32 end_y = 4;

		optional uint32 colour = 5;
	}

	message VisionTransitionSegment {
		optional uint32 start_x = 1;
		optional uint32 start_y = 2;

		optional uint32 end_x = 3;
		optional uint32 end_y = 4;

		optional uint32 colour = 5;

		optional uint32 colour_class = 6;
	}

	message VisionGreenHorizonPoint {
		optional uint32 x = 1;
		optional uint32 y = 2;
	}

	message VisionClassifiedImage {
		optional uint32 num_segments = 1;
		repeated VisionClassifiedSegment segment = 2;
		repeated VisionTransitionSegment transition_segment = 3;
        repeated VisionGreenHorizonPoint green_horizon_point = 4;
	}

	message Vision {
		optional Image image = 1;
		repeated VisionFieldObject vision_object = 2;
		optional VisionClassifiedImage classified_image = 3;
	}

	message Vector {
		repeated float float_value = 1;
	}
}
